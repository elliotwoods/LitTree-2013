//@author: elliotwoods
//@help: select a volume (still doing this old trick?)
//@tags: texture
//@credits: 

Texture2D<float3> texture2d : PREVIOUS;
float Radius = 1.0f;
float Thickness = 0.1f;
float Phase = 0.0f;
float4x4 TransformInverse;
float2 R:TARGETSIZE;
float4 cAmb <bool color=true;String uiname="Color";> = { 1.0f,1.0f,1.0f,1.0f };

SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
};

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};


float4 PSSphere(psInput input) : SV_Target
{
	float4 World;
	World.xyz = texture2d.Sample(linearSampler,input.uv);
	World.w = 1.0f;
	float4 Object = mul(World, TransformInverse);
	
	float xInThickness = abs(length(Object.xyz) - Radius);
	float value = 1.0f -  smoothstep(0, Thickness, xInThickness);
	return value * cAmb * (length(World.xyz) > 0.001);
}

float4 PSSphereFill(psInput input) : SV_Target
{
	float2 x = R * input.uv;
	float4 World;
	World.xyz = texture2d[x];
	World.w = 1.0f;
	World = mul(World, TransformInverse);
	
	return (length(World.xyz) < Radius) * cAmb;
}

float4 PSSphereFillGradient(psInput input) : SV_Target
{
	float2 x = R * input.uv;
	float4 World;
	World.xyz = texture2d[x];
	World.w = 1.0f;
	float4 Object = mul(World, TransformInverse);
	float value = length(Object.xyz) / Radius;
	value = 1.0f - clamp(value, 0, 1);
	value *= length(World.xyz) > 0.001f * World.a > 0.5f;
	return value * cAmb;
}

float4 PSSphereFillGradientNegative(psInput input) : SV_Target
{
	float2 x = R * input.uv;
	float4 World;
	World.xyz = texture2d[x];
	World.w = 1.0f;
	World = mul(World, TransformInverse);
	float value = length(World.xyz) / Radius;
	value = clamp(value, 0, 1);
	value *= value < 1.0f;
	return value * cAmb;
}

float4 PSPlane(psInput input) : SV_Target
{
	float4 World;
	World.xyz = texture2d.Sample(linearSampler,input.uv);
	World.w = 1.0f;
	float4 Object = mul(World, TransformInverse);
	float xInThickness = abs(length(Object.y) - Radius);
	float value = 1.0f -  smoothstep(0, Thickness, xInThickness);
	value *= abs(Object.z < 0.5f);
	return value * cAmb * (length(World.xyz) > 0.001f);
}


technique10 Sphere
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PSSphere()));
	}
}

technique10 SphereFill
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PSSphereFill()));
	}
}

technique10 SphereFillGradient
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PSSphereFillGradient()));
	}
}


technique10 SphereFillGradientNegative
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PSSphereFillGradientNegative()));
	}
}

technique10 Plane
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PSPlane()));
	}
}

