//@author: vux
//@help: template for texture fx
//@tags: texture
//@credits: 

Texture2D texture2d : PREVIOUS;
Texture2D<float> projection;
float4x4 Projection;

float threshold = 0.1f;

SamplerState linearSampler : IMMUTABLE
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Clamp;
    AddressV = Clamp;
};

struct psInput
{
	float4 p : SV_Position;
	float2 uv : TEXCOORD0;
};


float4 PS(psInput input) : SV_Target
{
	float4 World = texture2d.Sample(linearSampler,input.uv);
	float4 Object = mul(World, Projection);
	
	float2 texcd = Object.xy;
	texcd += 1.0f;
	texcd /= 2.0f;
	texcd.y = 1.0f - texcd.y;
	
	float zInProjectionHand = projection.Sample(linearSampler, texcd);
	
	float value = 1.0f - smoothstep(0, threshold, abs(zInProjectionHand - Object.z));
	value *= zInProjectionHand > 0.001f;
	
	return (length(World.xyz) > 0.001f) * value;
	
	float4 result;
	result.rg = Object.xy;
	result.b = 0.0f;
	result.a = 1.0f;
	return result;
}

technique10 Process
{
	pass P0
	{
		SetPixelShader(CompileShader(ps_4_0,PS()));
	}
}



